<?php
/**
 * @package
 * @category
 * @subcategory
 * Date: 6/30/12T10:18 AM
 */
namespace BloomTests;
require_once
    dirname(dirname(dirname(__DIR__))) .
    '/library/Bloom/Hash/HashInterface.php';
require_once
    dirname(dirname(dirname(__DIR__))) . '/library/Bloom/Hash/Murmur.php';
require_once
    dirname(dirname(dirname(__DIR__))) . '/library/Bloom/Filter.php';
require_once 'Rediska.php';
/**
 * @package
 * @category
 * @subcategory
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-30 at 10:37:38.
 */
class HashMixTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Bloom\Filter
     */
    protected $object;

    protected $_cycles = 10000;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new \Bloom\Filter();
        $this->object->setHash(new \Bloom\Hash\Murmur());
        $this->object->setRediska(new \Rediska());
    }

    public function tearDown()
    {
        $this->object
            ->getRediska()
            ->flushDb(true);
        $this->object = null;
    }

    public function testBenchMark()
    {
        $elements = file(dirname(dirname(__DIR__)) . '/NAMES.txt');
        echo 'Wordlist size:', count($elements), PHP_EOL;
        $start = microtime(true);
        $this->object->add($elements);
        echo 'save time:', microtime(true) - $start, PHP_EOL;
        $start = microtime(true);
        foreach ($elements as $el) {
            $this->assertTrue($this->object->contains($el));
        }
        foreach (array('zzzzzz','zzzzzzzzz','aaaaaaa','aaaagvdsgfdsfg') as $el) {
            $this->assertFalse($this->object->contains($el));
        }
        echo PHP_EOL, 'endtime:', microtime(true) - $start, PHP_EOL;
//        echo 'Total keys added:', $this->object->getNumberOfElements(),  PHP_EOL;
        $this->assertTrue($this->object->contains($elements));

    }
    /**
     * 2.6631093025208E-5/operation
     */
    public function testAdd()
    {
        $this->assertFalse($this->object->contains('aaa'));
        $this->object->add('aaa');
        $this->assertTrue($this->object->contains('aaa'));
    }

    public function testContains()
    {
        $this->object->add('aaa');
        $this->assertTrue($this->object->contains('aaa'));
        $this->assertFalse($this->object->contains('bbb'));
    }

    public function testAddMulti()
    {
        $data = array(
            'aaa', 'bbb', 'ccc', 'ddd'
        );
        $this->object->add($data);
        $this->assertTrue($this->object->contains($data));
    }

    public function testKeyCount()
    {
        $data = array(
            'aaa', 'bbb', 'ccc', 'ddd'
        );
        $this->object->add($data);
        $this->assertEquals(4, $this->object->getCount());
        $this->object->add('eee');
        $this->assertEquals(5, $this->object->getCount());
        $this->object->add($data);
        $this->assertEquals(5, $this->object->getCount());
        $this->object->add('eee');
        $this->assertEquals(5, $this->object->getCount());

    }

    public function testGetProbability()
    {
        $data = array(
            'aaa', 'bbb', 'ccc', 'ddd'
        );
        $this->object->add($data);
        $this->assertTrue($this->object->getFalsePositiveProbability() > 0);
        $this->assertTrue(
            $this->object->getFalsePositiveProbability() < 0.0000001
        );
    }
}
